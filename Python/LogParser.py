# You are working on a software-defined vehicle platform and need to analyze log entries generated by various 
# vehicle systems. Each log entry is a string containing a timestamp, a log level (INFO, WARNING, or ERROR), 
# and a message. Your task is to write a function that extracts and organizes this information.
#
# Problem: Write a Python function analyze_logs(logs: list) -> dict that:
# - Extracts the count of each log level (INFO, WARNING, ERROR).
# - Separates the log messages into categories based on their log level.
# - Returns a dictionary with the following structure:
#   - {
#       "INFO": {"count": <count>, "messages": [<message1>, <message2>, ...]},
#       "WARNING": {"count": <count>, "messages": [<message1>, <message2>, ...]},
#       "ERROR": {"count": <count>, "messages": [<message1>, <message2>, ...]}
#     }
#

def analyze_logs(logs: list) -> dict:
    """
    
    """
    result = {
        "INFO":    {"count": 0, "messages": []},
        "WARNING": {"count": 0, "messages": []},
        "ERROR":   {"count": 0, "messages": []}
    }

    # Iterate over the logs
    for log in logs:
        # Split the log into its components
        parts = log.split(" ", 3)
        # Log level is at index 2
        log_level = parts[2]
        message   = parts[3]
        
        # Update the count of the log level
        if log_level in result:
            result[log_level]["count"] += 1
            result[log_level]["messages"].append(message)

# Example usage
logs = [
    "2024-11-07 10:15:30 INFO Engine started successfully.",
    "2024-11-07 10:17:45 WARNING Low tire pressure detected.",
    "2024-11-07 10:20:01 ERROR Engine overheating!",
    "2024-11-07 10:25:22 INFO Vehicle entering self-driving mode.",
    "2024-11-07 10:30:10 WARNING High battery temperature detected."
]

print(analyze_logs(logs))